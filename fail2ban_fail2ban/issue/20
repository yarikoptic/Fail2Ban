Issue {issueClosedAt = Nothing, issueUpdatedAt = GithubDate {fromGithubDate = 2012-08-01 01:58:42 UTC}, issueHtmlUrl = "https://github.com/fail2ban/fail2ban/issues/20", issueClosedBy = Nothing, issueLabels = [IssueLabel {labelColor = "d7e102", labelUrl = "https://api.github.com/repos/fail2ban/fail2ban/labels/wishlish", labelName = "wishlish"},IssueLabel {labelColor = "02d7e1", labelUrl = "https://api.github.com/repos/fail2ban/fail2ban/labels/moreinfo", labelName = "moreinfo"},IssueLabel {labelColor = "ededed", labelUrl = "https://api.github.com/repos/fail2ban/fail2ban/labels/patch", labelName = "patch"}], issueNumber = 20, issueAssignee = Nothing, issueUser = GithubUser {githubOwnerAvatarUrl = "https://secure.gravatar.com/avatar/4d506c0410e8accb75a97e91134dea41?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png", githubOwnerLogin = "cepheid666", githubOwnerUrl = "https://api.github.com/users/cepheid666", githubOwnerId = 1294598, githubOwnerGravatarId = "4d506c0410e8accb75a97e91134dea41"}, issueTitle = "Filters for sendmail - hackers and spammers", issuePullRequest = PullRequestReference {pullRequestReferenceHtmlUrl = Nothing, pullRequestReferencePatchUrl = Nothing, pullRequestReferenceDiffUrl = Nothing}, issueUrl = "https://api.github.com/repos/fail2ban/fail2ban/issues/20", issueCreatedAt = GithubDate {fromGithubDate = 2011-12-30 07:57:58 UTC}, issueBody = "There don't appear to be any default filters for sendmail, so I thought I'd contribute a couple.  The first one is to ban people who attempt to brute-force SMTP AUTH.  This doesn't work wonderfully since not all brute-force attempts can be captured by the particular regex I'm using, but it catches a few.  Ideally, one would use some other method (e.g. checking saslauthd logs) which would do a better job, but this is not always possible - for example, CentOS servers default to using saslauthd via PAM, and the current CentOS-packaged version of saslauthd (in all current CentOS dists) does not properly pass the \"remotehost\" parameter to PAM, so the saslauthd PAM errors are useless for fail2ban monitoring.  Thus, in the default configuration, the only way to use fail2ban to kick out sendmail brute-force hackers is the following.  (Another alternative is to set saslauthd's syslog level to \"debug,\" but that adds a lot of length to logfiles and is not an out-of-the-box configuration.)\r\n\r\nThe second filter is to lock out spammers who are looking for open relays.  Many spammers don't bother to \"test the waters\" on a server to check for an open relay - they usually just attempt to flood the server with dozens, even hundreds, of spam messages, simply hoping that the server is an open relay and will pass it on, and not caring if it's not.  The filter included below checks for repeated \"open relay\" probes and locks out the offenders who are trying to use the server as a spambot.  (Of course, this works only if you've actually locked down your server and disabled relaying without auth.)\r\n\r\nsendmail brute-force hack filter - sendmail.conf:\r\n\r\n```\r\n# Fail2Ban configuration file\r\n#\r\n# Author: Jamie Morrison; minor modifications by Amir Caspi\r\n# See http://theether.net/kb/100141\r\n#\r\n# $Revision: 1 $\r\n#\r\n\r\n[Definition]\r\n\r\n# Option: failregex\r\n# Notes.: regex to match the password failures messages in the logfile. The\r\n#          host must be matched by a group named \"host\". The tag \"<HOST>\" can\r\n#          be used for standard IP/hostname matching and is only an alias for\r\n#          (?:::f{4,6}:)?(?P<host>[\\w\\-.^_]+)\r\n# Values: TEXT\r\n#\r\nfailregex = \\[<HOST>\\]: possible SMTP attack: command=AUTH\r\n\r\n# Option:  ignoreregex\r\n# Notes.:  regex to ignore. If this regex matches, the line is ignored.\r\n# Values:  TEXT\r\n#\r\nignoreregex = \r\n```\r\n\r\nsendmail spam relay filter - sendmail-relay.conf:\r\n\r\n```\r\n# Fail2Ban configuration file\r\n#\r\n# Author: Amir Caspi\r\n#\r\n# $Revision: 1 $\r\n#\r\n\r\n[INCLUDES]\r\n\r\n# Read common prefixes. If any customizations available -- read them from\r\n# common.local\r\nbefore = common.conf\r\n\r\n[Definition]\r\n\r\n_daemon = sm-acceptingconnections\r\n\r\n# Option:  failregex\r\n# Notes.:  regex to match the password failures messages in the logfile. The\r\n#          host must be matched by a group named \"host\". The tag \"<HOST>\" can\r\n#          be used for standard IP/hostname matching and is only an alias for\r\n#          (?:::f{4,6}:)?(?P<host>[\\w\\-.^_]+)\r\n# Values:  TEXT\r\n#\r\nfailregex = ^%(__prefix_line)s\\S*: ruleset=check_rcpt, arg1=\\S*, relay=\\S*\\s*\\[<HOST>\\], reject=550 5.7.1 <\\S*>... Relaying denied. Proper authentication required.\\s*$\r\n\r\n# Option:  ignoreregex\r\n# Notes.:  regex to ignore. If this regex matches, the line is ignored.\r\n# Values:  TEXT\r\n#\r\nignoreregex = \r\n```\r\n\r\nAnd, the relevant jail.conf settings that I happen to use are:\r\n\r\n```\r\n[sendmail]\r\n\r\nenabled  = true\r\nfilter   = sendmail\r\naction   = iptables-multiport[name=SENDMAIL, port=\"smtp,smtps,submission\", protocol=tcp]\r\n           sendmail-whois-lines[name=SENDMAIL, dest=root, sender=fail2ban@mail.com, logpath=/var/log/maillog]\r\nlogpath  = /var/log/maillog\r\n# Once is enough for these jerks!\r\nmaxretry = 0\r\n\r\n[sendmail-relay]\r\n\r\nenabled  = true\r\nfilter   = sendmail-relay\r\naction   = iptables-multiport[name=SENDMAIL, port=\"smtp,smtps,submission\", protocol=tcp]\r\n           sendmail-whois-lines[name=SENDMAILrelay, dest=root, sender=fail2ban@mail.com, logpath=/var/log/maillog]\r\nlogpath  = /var/log/maillog\r\nmaxretry = 4\r\n```\r\n\r\nI hope these can be added to the default set of filters, as I think they would be quite useful - many still use sendmail and this has really helped to keep my sendmail hacks down to a minimum (particularly by tarpitting the damn spammers!).\r\n\r\nHope this helps.", issueState = "open", issueId = 2687231, issueComments = 5, issueMilestone = Nothing}